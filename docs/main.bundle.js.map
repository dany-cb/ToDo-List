{"version":3,"file":"main.bundle.js","mappings":"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","sources":["webpack://typescript/./src/task.ts","webpack://typescript/webpack/bootstrap","webpack://typescript/./src/index.ts"],"sourcesContent":["/**\r\n * Defines the necessary structure of the task and returns the Parent Element\r\n * @param textData text to be inserted\r\n */\r\nfunction createTaskEl() {\r\n  const div = document.createElement(\"div\");\r\n  div.className = \"task\";\r\n  const label = document.createElement(\"label\");\r\n  const checkBox = document.createElement(\"input\");\r\n  checkBox.setAttribute(\"type\", \"checkbox\");\r\n  checkBox.className = \"task_hiddenInput\";\r\n  const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\r\n  svg.setAttribute(\"viewBox\", \"0 0 15 15\");\r\n  svg.setAttribute(\"class\", \"i task_checkBox\");\r\n  const use = document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\");\r\n  use.setAttribute(\"href\", \"#tickSymbol\");\r\n  svg.appendChild(use);\r\n  label.append(checkBox, svg);\r\n  div.appendChild(label);\r\n  return div;\r\n}\r\n\r\nfunction addText(taskEl: Node, textData: string) {\r\n  const text = document.createElement(\"p\");\r\n  text.className = \"task_text\";\r\n  text.innerText = textData;\r\n  taskEl.appendChild(text);\r\n  return text;\r\n}\r\n\r\nfunction createRemoveBtn() {\r\n  const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\r\n  svg.setAttribute(\"viewBox\", \"0 0 24 24\");\r\n  svg.setAttribute(\"fill\", \"inherit\");\r\n  svg.setAttribute(\"class\", \"i task_delBtn\");\r\n  const use = document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\");\r\n  use.setAttribute(\"href\", \"#xSymbol\");\r\n  svg.appendChild(use);\r\n  return svg;\r\n}\r\n\r\nlet removeBtn: SVGElement | undefined;\r\nlet div: HTMLDivElement | undefined;\r\n\r\nclass Task {\r\n  taskEl: HTMLDivElement;\r\n  textEl: HTMLParagraphElement;\r\n  isDone: boolean;\r\n  isDeleted: boolean;\r\n\r\n  constructor(textData: string, container: HTMLDivElement, done = false) {\r\n    //Defining the necessary structure for each Task and appending it to the container\r\n    if (!div || !removeBtn) {\r\n      div = createTaskEl();\r\n      removeBtn = createRemoveBtn();\r\n    }\r\n    this.taskEl = div.cloneNode(true) as HTMLDivElement;\r\n    this.textEl = addText(this.taskEl, textData);\r\n    const xBtn = removeBtn.cloneNode(true) as SVGElement;\r\n    this.taskEl.appendChild(xBtn);\r\n    container.insertBefore(this.taskEl, container.firstChild);\r\n    const label = this.taskEl.firstChild?.firstChild as HTMLLabelElement;\r\n    label.addEventListener(\"click\", this.toggleState.bind(this));\r\n    xBtn.addEventListener(\"click\", this.removeTask.bind(this));\r\n\r\n    this.isDone = done;\r\n    this.isDeleted = false;\r\n  }\r\n\r\n  toggleState() {\r\n    this.isDone = !this.isDone;\r\n    this.textEl.style.textDecoration = this.isDone ? \"line-through\" : \"\";\r\n  }\r\n\r\n  removeTask() {\r\n    this.taskEl.firstChild?.removeEventListener(\r\n      \"click\",\r\n      this.toggleState.bind(this)\r\n    );\r\n    this.taskEl.remove();\r\n    this.isDeleted = true;\r\n  }\r\n}\r\n\r\nexport default Task;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import Icon from \"./assets/githubLogo-32px.png\";\r\nimport \"./styles.scss\";\r\nimport Task from \"./task\";\r\n\r\nfunction importAssets() {\r\n  const img = document.getElementById(\"logo\") as HTMLImageElement;\r\n  img.src = Icon;\r\n}\r\n\r\ninterface btn {\r\n  elmnt: HTMLButtonElement;\r\n  hidden: boolean;\r\n}\r\n[];\r\n\r\ntype btnType = \"primaryBtns\" | \"onAddBtns\" | \"onDelBtns\";\r\n\r\nclass TodoApp {\r\n  btns: {\r\n    [key in btnType]: btn[];\r\n  };\r\n\r\n  inputArea: {\r\n    elmnt: HTMLDivElement;\r\n    isEditable: boolean;\r\n  };\r\n\r\n  container: HTMLDivElement;\r\n\r\n  tasks: Task[];\r\n\r\n  constructor() {\r\n    importAssets();\r\n\r\n    this.btns = {\r\n      primaryBtns: [],\r\n      onAddBtns: [],\r\n      onDelBtns: []\r\n    };\r\n    this.updateBtns();\r\n\r\n    this.inputArea = {\r\n      elmnt: document.getElementById(\"addTask\") as HTMLDivElement,\r\n      isEditable: false\r\n    };\r\n    this.container = document.querySelector(\".tasksWrap\") as HTMLDivElement;\r\n    this.tasks = [];\r\n    this.setListeners();\r\n  }\r\n\r\n  setListeners() {\r\n    /*  Primary Buttons */\r\n    this.btns.primaryBtns[0].elmnt.addEventListener(\r\n      \"click\",\r\n      this.onClickAdd.bind(this)\r\n    ); // Add Btn\r\n    this.btns.primaryBtns[1].elmnt.addEventListener(\r\n      \"click\",\r\n      this.onClickDelete.bind(this)\r\n    ); // Delete Btn\r\n\r\n    /*  Buttons shown when Add is clicked */\r\n    this.btns.onAddBtns[0].elmnt.addEventListener(\r\n      \"click\",\r\n      this.onClickSave.bind(this)\r\n    ); // Save Btn\r\n    this.btns.onAddBtns[1].elmnt.addEventListener(\r\n      \"click\",\r\n      this.onClickDiscard.bind(this)\r\n    ); // Discard Btn\r\n\r\n    /*  Buttons shown when Delete is clicked  */\r\n    this.btns.onDelBtns[0].elmnt.addEventListener(\r\n      \"click\",\r\n      this.onClickDone.bind(this)\r\n    ); // Done Btn\r\n    this.btns.onDelBtns[1].elmnt.addEventListener(\r\n      \"click\",\r\n      this.onClickClearAll.bind(this)\r\n    ); // ClearAll Btn\r\n\r\n    /*  Enter key pressed within TextArea */\r\n    this.inputArea.elmnt.addEventListener(\"keydown\", (ev) => {\r\n      if (ev.key === \"Enter\") {\r\n        // console.log(\"Enter clicked inside TextBox\");\r\n        this.onClickSave();\r\n      }\r\n    });\r\n  }\r\n\r\n  toggleBtnStates(btn1: btnType, btn2: btnType) {\r\n    if (btn1 === btn2)\r\n      console.warn(\"toggleBtnStates() called with same arguments\");\r\n\r\n    [btn1, btn2].forEach((btnType) => {\r\n      this.btns[btnType].map((btn) => {\r\n        if (btn.hidden) {\r\n          btn.elmnt.style.display = \"\";\r\n        } else {\r\n          btn.elmnt.style.display = \"none\";\r\n        }\r\n        btn.hidden = !btn.hidden;\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Toggles the Primary Btns and the InputArea\r\n   * Can be reused to reverse the changes\r\n   */\r\n  onClickAdd() {\r\n    this.inputArea.elmnt.contentEditable = this.inputArea.isEditable\r\n      ? \"false\"\r\n      : \"true\";\r\n    this.inputArea.isEditable = !this.inputArea.isEditable;\r\n    this.toggleBtnStates(\"primaryBtns\", \"onAddBtns\");\r\n    this.inputArea.elmnt.focus();\r\n  }\r\n\r\n  onClickSave() {\r\n    if (this.inputArea.elmnt.innerText) {\r\n      this.tasks.push(new Task(this.inputArea.elmnt.innerText, this.container));\r\n      this.inputArea.elmnt.innerText = \"\";\r\n      this.onClickAdd();\r\n    } else {\r\n      this.inputArea.elmnt.classList.add(\"addTask-error\");\r\n      setTimeout(() => {\r\n        this.inputArea.elmnt.classList.remove(\"addTask-error\");\r\n        this.inputArea.elmnt.focus();\r\n      }, 700);\r\n    }\r\n  }\r\n\r\n  onClickDiscard() {\r\n    this.inputArea.elmnt.innerText = \"\";\r\n    this.onClickAdd();\r\n  }\r\n\r\n  onClickDelete() {\r\n    this.toggleBtnStates(\"primaryBtns\", \"onDelBtns\");\r\n    this.container.classList.toggle(\"tasksWrap-delete\");\r\n  }\r\n\r\n  onClickDone() {\r\n    this.onClickDelete();\r\n    this.tasks = this.tasks.filter((task) => !task.isDeleted);\r\n  }\r\n\r\n  onClickClearAll() {\r\n    this.onClickDelete();\r\n    this.tasks.map((task) => task.removeTask());\r\n    this.tasks = [];\r\n  }\r\n\r\n  updateBtns() {\r\n    const btnNames = {\r\n      primaryBtns: [\"add\", \"del\"],\r\n      onAddBtns: [\"save\", \"discard\"],\r\n      onDelBtns: [\"done\", \"clearAll\"]\r\n    };\r\n    for (const [key, value] of Object.entries(btnNames)) {\r\n      this.btns[key as btnType].push(\r\n        ...value.map((name) => ({\r\n          elmnt: document.querySelector(\r\n            `.editBtns_${name}`\r\n          ) as HTMLButtonElement,\r\n          hidden: key != \"primaryBtns\"\r\n        }))\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nnew TodoApp();\r\n"],"names":["removeBtn","div","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","textData","container","done","document","createElement","className","label","checkBox","setAttribute","svg","createElementNS","use","appendChild","append","createTaskEl","createRemoveBtn","this","taskEl","cloneNode","textEl","text","innerText","addText","xBtn","insertBefore","firstChild","addEventListener","toggleState","bind","removeTask","isDone","isDeleted","style","textDecoration","removeEventListener","remove","getElementById","src","btns","primaryBtns","onAddBtns","onDelBtns","updateBtns","inputArea","elmnt","isEditable","querySelector","tasks","setListeners","onClickAdd","onClickDelete","onClickSave","onClickDiscard","onClickDone","onClickClearAll","ev","key","toggleBtnStates","btn1","btn2","console","warn","forEach","btnType","map","btn","hidden","display","contentEditable","focus","push","classList","add","setTimeout","toggle","filter","task","value","name","Object","entries"],"sourceRoot":""}